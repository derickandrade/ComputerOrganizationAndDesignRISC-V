// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "01/18/2025 18:18:50"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    ulaRV
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module ulaRV_vlg_sample_tst(
	A,
	B,
	opcode,
	sampler_tx
);
input [31:0] A;
input [31:0] B;
input [3:0] opcode;
output sampler_tx;

reg sample;
time current_time;
always @(A or B or opcode)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module ulaRV_vlg_check_tst (
	cond,
	Z,
	zero,
	sampler_rx
);
input  cond;
input [31:0] Z;
input  zero;
input sampler_rx;

reg  cond_expected;
reg [31:0] Z_expected;
reg  zero_expected;

reg  cond_prev;
reg [31:0] Z_prev;
reg  zero_prev;

reg  cond_expected_prev;
reg [31:0] Z_expected_prev;
reg  zero_expected_prev;

reg  last_cond_exp;
reg [31:0] last_Z_exp;
reg  last_zero_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:3] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 3'b1;
end

// update real /o prevs

always @(trigger)
begin
	cond_prev = cond;
	Z_prev = Z;
	zero_prev = zero;
end

// update expected /o prevs

always @(trigger)
begin
	cond_expected_prev = cond_expected;
	Z_expected_prev = Z_expected;
	zero_expected_prev = zero_expected;
end



// expected cond
initial
begin
	cond_expected = 1'bX;
end 
// expected Z[ 31 ]
initial
begin
	Z_expected[31] = 1'bX;
end 
// expected Z[ 30 ]
initial
begin
	Z_expected[30] = 1'bX;
end 
// expected Z[ 29 ]
initial
begin
	Z_expected[29] = 1'bX;
end 
// expected Z[ 28 ]
initial
begin
	Z_expected[28] = 1'bX;
end 
// expected Z[ 27 ]
initial
begin
	Z_expected[27] = 1'bX;
end 
// expected Z[ 26 ]
initial
begin
	Z_expected[26] = 1'bX;
end 
// expected Z[ 25 ]
initial
begin
	Z_expected[25] = 1'bX;
end 
// expected Z[ 24 ]
initial
begin
	Z_expected[24] = 1'bX;
end 
// expected Z[ 23 ]
initial
begin
	Z_expected[23] = 1'bX;
end 
// expected Z[ 22 ]
initial
begin
	Z_expected[22] = 1'bX;
end 
// expected Z[ 21 ]
initial
begin
	Z_expected[21] = 1'bX;
end 
// expected Z[ 20 ]
initial
begin
	Z_expected[20] = 1'bX;
end 
// expected Z[ 19 ]
initial
begin
	Z_expected[19] = 1'bX;
end 
// expected Z[ 18 ]
initial
begin
	Z_expected[18] = 1'bX;
end 
// expected Z[ 17 ]
initial
begin
	Z_expected[17] = 1'bX;
end 
// expected Z[ 16 ]
initial
begin
	Z_expected[16] = 1'bX;
end 
// expected Z[ 15 ]
initial
begin
	Z_expected[15] = 1'bX;
end 
// expected Z[ 14 ]
initial
begin
	Z_expected[14] = 1'bX;
end 
// expected Z[ 13 ]
initial
begin
	Z_expected[13] = 1'bX;
end 
// expected Z[ 12 ]
initial
begin
	Z_expected[12] = 1'bX;
end 
// expected Z[ 11 ]
initial
begin
	Z_expected[11] = 1'bX;
end 
// expected Z[ 10 ]
initial
begin
	Z_expected[10] = 1'bX;
end 
// expected Z[ 9 ]
initial
begin
	Z_expected[9] = 1'bX;
end 
// expected Z[ 8 ]
initial
begin
	Z_expected[8] = 1'bX;
end 
// expected Z[ 7 ]
initial
begin
	Z_expected[7] = 1'bX;
end 
// expected Z[ 6 ]
initial
begin
	Z_expected[6] = 1'bX;
end 
// expected Z[ 5 ]
initial
begin
	Z_expected[5] = 1'bX;
end 
// expected Z[ 4 ]
initial
begin
	Z_expected[4] = 1'bX;
end 
// expected Z[ 3 ]
initial
begin
	Z_expected[3] = 1'bX;
end 
// expected Z[ 2 ]
initial
begin
	Z_expected[2] = 1'bX;
end 
// expected Z[ 1 ]
initial
begin
	Z_expected[1] = 1'bX;
end 
// expected Z[ 0 ]
initial
begin
	Z_expected[0] = 1'bX;
end 

// expected zero
initial
begin
	zero_expected = 1'bX;
end 
// generate trigger
always @(cond_expected or cond or Z_expected or Z or zero_expected or zero)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected cond = %b | expected Z = %b | expected zero = %b | ",cond_expected_prev,Z_expected_prev,zero_expected_prev);
	$display("| real cond = %b | real Z = %b | real zero = %b | ",cond_prev,Z_prev,zero_prev);
`endif
	if (
		( cond_expected_prev !== 1'bx ) && ( cond_prev !== cond_expected_prev )
		&& ((cond_expected_prev !== last_cond_exp) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port cond :: @time = %t",  $realtime);
		$display ("     Expected value = %b", cond_expected_prev);
		$display ("     Real value = %b", cond_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_cond_exp = cond_expected_prev;
	end
	if (
		( Z_expected_prev[0] !== 1'bx ) && ( Z_prev[0] !== Z_expected_prev[0] )
		&& ((Z_expected_prev[0] !== last_Z_exp[0]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[0] = Z_expected_prev[0];
	end
	if (
		( Z_expected_prev[1] !== 1'bx ) && ( Z_prev[1] !== Z_expected_prev[1] )
		&& ((Z_expected_prev[1] !== last_Z_exp[1]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[1] = Z_expected_prev[1];
	end
	if (
		( Z_expected_prev[2] !== 1'bx ) && ( Z_prev[2] !== Z_expected_prev[2] )
		&& ((Z_expected_prev[2] !== last_Z_exp[2]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[2] = Z_expected_prev[2];
	end
	if (
		( Z_expected_prev[3] !== 1'bx ) && ( Z_prev[3] !== Z_expected_prev[3] )
		&& ((Z_expected_prev[3] !== last_Z_exp[3]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[3] = Z_expected_prev[3];
	end
	if (
		( Z_expected_prev[4] !== 1'bx ) && ( Z_prev[4] !== Z_expected_prev[4] )
		&& ((Z_expected_prev[4] !== last_Z_exp[4]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[4] = Z_expected_prev[4];
	end
	if (
		( Z_expected_prev[5] !== 1'bx ) && ( Z_prev[5] !== Z_expected_prev[5] )
		&& ((Z_expected_prev[5] !== last_Z_exp[5]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[5] = Z_expected_prev[5];
	end
	if (
		( Z_expected_prev[6] !== 1'bx ) && ( Z_prev[6] !== Z_expected_prev[6] )
		&& ((Z_expected_prev[6] !== last_Z_exp[6]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[6] = Z_expected_prev[6];
	end
	if (
		( Z_expected_prev[7] !== 1'bx ) && ( Z_prev[7] !== Z_expected_prev[7] )
		&& ((Z_expected_prev[7] !== last_Z_exp[7]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[7] = Z_expected_prev[7];
	end
	if (
		( Z_expected_prev[8] !== 1'bx ) && ( Z_prev[8] !== Z_expected_prev[8] )
		&& ((Z_expected_prev[8] !== last_Z_exp[8]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[8] = Z_expected_prev[8];
	end
	if (
		( Z_expected_prev[9] !== 1'bx ) && ( Z_prev[9] !== Z_expected_prev[9] )
		&& ((Z_expected_prev[9] !== last_Z_exp[9]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[9] = Z_expected_prev[9];
	end
	if (
		( Z_expected_prev[10] !== 1'bx ) && ( Z_prev[10] !== Z_expected_prev[10] )
		&& ((Z_expected_prev[10] !== last_Z_exp[10]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[10] = Z_expected_prev[10];
	end
	if (
		( Z_expected_prev[11] !== 1'bx ) && ( Z_prev[11] !== Z_expected_prev[11] )
		&& ((Z_expected_prev[11] !== last_Z_exp[11]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[11] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[11] = Z_expected_prev[11];
	end
	if (
		( Z_expected_prev[12] !== 1'bx ) && ( Z_prev[12] !== Z_expected_prev[12] )
		&& ((Z_expected_prev[12] !== last_Z_exp[12]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[12] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[12] = Z_expected_prev[12];
	end
	if (
		( Z_expected_prev[13] !== 1'bx ) && ( Z_prev[13] !== Z_expected_prev[13] )
		&& ((Z_expected_prev[13] !== last_Z_exp[13]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[13] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[13] = Z_expected_prev[13];
	end
	if (
		( Z_expected_prev[14] !== 1'bx ) && ( Z_prev[14] !== Z_expected_prev[14] )
		&& ((Z_expected_prev[14] !== last_Z_exp[14]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[14] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[14] = Z_expected_prev[14];
	end
	if (
		( Z_expected_prev[15] !== 1'bx ) && ( Z_prev[15] !== Z_expected_prev[15] )
		&& ((Z_expected_prev[15] !== last_Z_exp[15]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[15] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[15] = Z_expected_prev[15];
	end
	if (
		( Z_expected_prev[16] !== 1'bx ) && ( Z_prev[16] !== Z_expected_prev[16] )
		&& ((Z_expected_prev[16] !== last_Z_exp[16]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[16] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[16] = Z_expected_prev[16];
	end
	if (
		( Z_expected_prev[17] !== 1'bx ) && ( Z_prev[17] !== Z_expected_prev[17] )
		&& ((Z_expected_prev[17] !== last_Z_exp[17]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[17] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[17] = Z_expected_prev[17];
	end
	if (
		( Z_expected_prev[18] !== 1'bx ) && ( Z_prev[18] !== Z_expected_prev[18] )
		&& ((Z_expected_prev[18] !== last_Z_exp[18]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[18] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[18] = Z_expected_prev[18];
	end
	if (
		( Z_expected_prev[19] !== 1'bx ) && ( Z_prev[19] !== Z_expected_prev[19] )
		&& ((Z_expected_prev[19] !== last_Z_exp[19]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[19] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[19] = Z_expected_prev[19];
	end
	if (
		( Z_expected_prev[20] !== 1'bx ) && ( Z_prev[20] !== Z_expected_prev[20] )
		&& ((Z_expected_prev[20] !== last_Z_exp[20]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[20] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[20] = Z_expected_prev[20];
	end
	if (
		( Z_expected_prev[21] !== 1'bx ) && ( Z_prev[21] !== Z_expected_prev[21] )
		&& ((Z_expected_prev[21] !== last_Z_exp[21]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[21] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[21] = Z_expected_prev[21];
	end
	if (
		( Z_expected_prev[22] !== 1'bx ) && ( Z_prev[22] !== Z_expected_prev[22] )
		&& ((Z_expected_prev[22] !== last_Z_exp[22]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[22] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[22] = Z_expected_prev[22];
	end
	if (
		( Z_expected_prev[23] !== 1'bx ) && ( Z_prev[23] !== Z_expected_prev[23] )
		&& ((Z_expected_prev[23] !== last_Z_exp[23]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[23] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[23] = Z_expected_prev[23];
	end
	if (
		( Z_expected_prev[24] !== 1'bx ) && ( Z_prev[24] !== Z_expected_prev[24] )
		&& ((Z_expected_prev[24] !== last_Z_exp[24]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[24] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[24] = Z_expected_prev[24];
	end
	if (
		( Z_expected_prev[25] !== 1'bx ) && ( Z_prev[25] !== Z_expected_prev[25] )
		&& ((Z_expected_prev[25] !== last_Z_exp[25]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[25] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[25] = Z_expected_prev[25];
	end
	if (
		( Z_expected_prev[26] !== 1'bx ) && ( Z_prev[26] !== Z_expected_prev[26] )
		&& ((Z_expected_prev[26] !== last_Z_exp[26]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[26] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[26] = Z_expected_prev[26];
	end
	if (
		( Z_expected_prev[27] !== 1'bx ) && ( Z_prev[27] !== Z_expected_prev[27] )
		&& ((Z_expected_prev[27] !== last_Z_exp[27]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[27] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[27] = Z_expected_prev[27];
	end
	if (
		( Z_expected_prev[28] !== 1'bx ) && ( Z_prev[28] !== Z_expected_prev[28] )
		&& ((Z_expected_prev[28] !== last_Z_exp[28]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[28] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[28] = Z_expected_prev[28];
	end
	if (
		( Z_expected_prev[29] !== 1'bx ) && ( Z_prev[29] !== Z_expected_prev[29] )
		&& ((Z_expected_prev[29] !== last_Z_exp[29]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[29] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[29] = Z_expected_prev[29];
	end
	if (
		( Z_expected_prev[30] !== 1'bx ) && ( Z_prev[30] !== Z_expected_prev[30] )
		&& ((Z_expected_prev[30] !== last_Z_exp[30]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[30] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[30] = Z_expected_prev[30];
	end
	if (
		( Z_expected_prev[31] !== 1'bx ) && ( Z_prev[31] !== Z_expected_prev[31] )
		&& ((Z_expected_prev[31] !== last_Z_exp[31]) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Z[31] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Z_expected_prev);
		$display ("     Real value = %b", Z_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_Z_exp[31] = Z_expected_prev[31];
	end
	if (
		( zero_expected_prev !== 1'bx ) && ( zero_prev !== zero_expected_prev )
		&& ((zero_expected_prev !== last_zero_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port zero :: @time = %t",  $realtime);
		$display ("     Expected value = %b", zero_expected_prev);
		$display ("     Real value = %b", zero_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_zero_exp = zero_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module ulaRV_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [31:0] A;
reg [31:0] B;
reg [3:0] opcode;
// wires                                               
wire cond;
wire [31:0] Z;
wire zero;

wire sampler;                             

// assign statements (if any)                          
ulaRV i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.cond(cond),
	.opcode(opcode),
	.Z(Z),
	.zero(zero)
);
// A[ 31 ]
initial
begin
	A[31] = 1'b0;
end 
// A[ 30 ]
initial
begin
	A[30] = 1'b0;
end 
// A[ 29 ]
initial
begin
	A[29] = 1'b0;
end 
// A[ 28 ]
initial
begin
	A[28] = 1'b0;
end 
// A[ 27 ]
initial
begin
	A[27] = 1'b0;
end 
// A[ 26 ]
initial
begin
	A[26] = 1'b0;
end 
// A[ 25 ]
initial
begin
	A[25] = 1'b0;
end 
// A[ 24 ]
initial
begin
	A[24] = 1'b0;
end 
// A[ 23 ]
initial
begin
	A[23] = 1'b0;
end 
// A[ 22 ]
initial
begin
	A[22] = 1'b0;
end 
// A[ 21 ]
initial
begin
	A[21] = 1'b0;
end 
// A[ 20 ]
initial
begin
	A[20] = 1'b0;
end 
// A[ 19 ]
initial
begin
	A[19] = 1'b0;
end 
// A[ 18 ]
initial
begin
	A[18] = 1'b0;
end 
// A[ 17 ]
initial
begin
	A[17] = 1'b0;
end 
// A[ 16 ]
initial
begin
	A[16] = 1'b0;
end 
// A[ 15 ]
initial
begin
	A[15] = 1'b0;
end 
// A[ 14 ]
initial
begin
	A[14] = 1'b0;
end 
// A[ 13 ]
initial
begin
	A[13] = 1'b0;
end 
// A[ 12 ]
initial
begin
	A[12] = 1'b0;
end 
// A[ 11 ]
initial
begin
	A[11] = 1'b0;
end 
// A[ 10 ]
initial
begin
	A[10] = 1'b0;
end 
// A[ 9 ]
initial
begin
	A[9] = 1'b0;
end 
// A[ 8 ]
initial
begin
	A[8] = 1'b0;
end 
// A[ 7 ]
initial
begin
	A[7] = 1'b0;
end 
// A[ 6 ]
initial
begin
	A[6] = 1'b0;
end 
// A[ 5 ]
initial
begin
	A[5] = 1'b0;
end 
// A[ 4 ]
initial
begin
	A[4] = 1'b0;
end 
// A[ 3 ]
initial
begin
	A[3] = 1'b0;
end 
// A[ 2 ]
initial
begin
	A[2] = 1'b1;
end 
// A[ 1 ]
initial
begin
	A[1] = 1'b0;
end 
// A[ 0 ]
initial
begin
	A[0] = 1'b1;
end 
// B[ 31 ]
initial
begin
	B[31] = 1'b0;
end 
// B[ 30 ]
initial
begin
	B[30] = 1'b0;
end 
// B[ 29 ]
initial
begin
	B[29] = 1'b0;
end 
// B[ 28 ]
initial
begin
	B[28] = 1'b0;
end 
// B[ 27 ]
initial
begin
	B[27] = 1'b0;
end 
// B[ 26 ]
initial
begin
	B[26] = 1'b0;
end 
// B[ 25 ]
initial
begin
	B[25] = 1'b0;
end 
// B[ 24 ]
initial
begin
	B[24] = 1'b0;
end 
// B[ 23 ]
initial
begin
	B[23] = 1'b0;
end 
// B[ 22 ]
initial
begin
	B[22] = 1'b0;
end 
// B[ 21 ]
initial
begin
	B[21] = 1'b0;
end 
// B[ 20 ]
initial
begin
	B[20] = 1'b0;
end 
// B[ 19 ]
initial
begin
	B[19] = 1'b0;
end 
// B[ 18 ]
initial
begin
	B[18] = 1'b0;
end 
// B[ 17 ]
initial
begin
	B[17] = 1'b0;
end 
// B[ 16 ]
initial
begin
	B[16] = 1'b0;
end 
// B[ 15 ]
initial
begin
	B[15] = 1'b0;
end 
// B[ 14 ]
initial
begin
	B[14] = 1'b0;
end 
// B[ 13 ]
initial
begin
	B[13] = 1'b0;
end 
// B[ 12 ]
initial
begin
	B[12] = 1'b0;
end 
// B[ 11 ]
initial
begin
	B[11] = 1'b0;
end 
// B[ 10 ]
initial
begin
	B[10] = 1'b0;
end 
// B[ 9 ]
initial
begin
	B[9] = 1'b0;
end 
// B[ 8 ]
initial
begin
	B[8] = 1'b0;
end 
// B[ 7 ]
initial
begin
	B[7] = 1'b0;
end 
// B[ 6 ]
initial
begin
	B[6] = 1'b0;
end 
// B[ 5 ]
initial
begin
	B[5] = 1'b0;
end 
// B[ 4 ]
initial
begin
	B[4] = 1'b0;
end 
// B[ 3 ]
initial
begin
	B[3] = 1'b0;
end 
// B[ 2 ]
initial
begin
	B[2] = 1'b0;
end 
// B[ 1 ]
initial
begin
	B[1] = 1'b1;
end 
// B[ 0 ]
initial
begin
	B[0] = 1'b1;
end 
// opcode[ 3 ]
initial
begin
	repeat(6)
	begin
		opcode[3] = 1'b0;
		opcode[3] = #80000 1'b1;
		# 80000;
	end
	opcode[3] = 1'b0;
end 
// opcode[ 2 ]
initial
begin
	repeat(12)
	begin
		opcode[2] = 1'b0;
		opcode[2] = #40000 1'b1;
		# 40000;
	end
	opcode[2] = 1'b0;
end 
// opcode[ 1 ]
always
begin
	opcode[1] = 1'b0;
	opcode[1] = #20000 1'b1;
	#20000;
end 
// opcode[ 0 ]
always
begin
	opcode[0] = 1'b0;
	opcode[0] = #10000 1'b1;
	#10000;
end 

ulaRV_vlg_sample_tst tb_sample (
	.A(A),
	.B(B),
	.opcode(opcode),
	.sampler_tx(sampler)
);

ulaRV_vlg_check_tst tb_out(
	.cond(cond),
	.Z(Z),
	.zero(zero),
	.sampler_rx(sampler)
);
endmodule

